{"version":3,"file":"static/js/442.d4a23929.chunk.js","mappings":"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","sources":["redux/phonebook/phonebook-selectors.js","../node_modules/nanoid/index.browser.js","components/Phonebook/Phonebook.js","webpack://goit-react-hw-08-contacts/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-contacts/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","webpack://goit-react-hw-08-contacts/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/ContactsPage.js","webpack://goit-react-hw-08-contacts/./src/pages/StylesForPages.module.css?7b60"],"sourcesContent":["export const getContacts = (state) => state.contacts.phonebook;\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getVisibleContacts = (state) => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\nimport { getVisibleContacts } from '../../redux/phonebook/phonebook-selectors';\nimport { nanoid } from 'nanoid';\nimport { Box, Button, TextField } from '@mui/material';\n\nexport default function Phonebook() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const addContactItem = ({ name, number }) => {\n    const contact = {\n      id: nanoid(), name, number,\n    };\n    \n    if (contacts.find((item) =>\n      (item.name.toLowerCase()) === (contact.name.toLowerCase()))) {\n      return alert(`Contact ${name} already exists`);\n    } else if (contacts.find((contact) => contact.number === number)) {\n      alert(`${number} already exists`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setName(\"\");\n    setNumber(\"\");\n    addContactItem({ name, number });\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          marginTop: 4,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}>\n        <Box\n          component=\"form\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n          oValidate sx={{ mt: 1 }}\n        >\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"name\"\n            label=\"Name\"\n            autoComplete=\"name\"\n            placeholder=\"Jane Smith\"\n           \n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            value={name}\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={(e) => setName(e.target.value)}\n          />\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"number\"\n            label=\"Number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\styles]?\\(?\\d{1,3}?\\)?[-.\\styles]?\\d{1,4}[-.\\styles]?\\d{1,4}[-.\\styles]?\\d{1,9}\"\n            value={number}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={(e) => setNumber(e.target.value)}\n          />\n          <Button\n            color=\"secondary\"\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Add Contact\n          </Button>\n        </Box>\n      </Box>\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\"};","// extracted by mini-css-extract-plugin\nexport default {\"span\":\"ContactItem_span__8yGo-\"};","import styles from './ContactItem.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/phonebook/phonebook-operations';\nimport { Button } from '@mui/material';\n\nexport default function ContactItem({name, number, id}) {\n    const dispatch = useDispatch();\n    \n    return (\n        <>\n            <span className={styles.span}>\n                {name} : {number}\n            </span>\n            <Button\n                color=\"secondary\"\n                type=\"submit\"\n                variant=\"contained\"\n                onClick={() => dispatch(deleteContact(id))}\n                sx={{ float: ' right' }}\n            >\n                Delete\n            </Button>\n        </>\n    );\n};\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n};","import styles from './ContactList.module.css';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/phonebook/phonebook-selectors';\nimport { Box } from '@mui/material';\n\nexport default function Contacts() {\n  const contacts = useSelector(getVisibleContacts);\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}>\n      <Box\n        component=\"form\"\n        autoComplete=\"off\"\n        sx={{ mt: 1, width: 580, }}\n      >\n        <ul className={styles.list}>\n          {contacts.map((contact) => (\n            <li key={contact.id} className={styles.item}>\n              <ContactItem\n                name={contact.name}\n                number={contact.number}\n                id={contact.id} />\n            </li>\n          ))}\n        </ul>\n      </Box>\n    </Box>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"span\":\"Filter_span__lNPVu\"};","import { useDispatch, useSelector } from 'react-redux';\nimport styles from './Filter.module.css';\nimport { Box, TextField } from '@mui/material';\nimport { changeFilter } from '../../redux/phonebook/phonebook-operations';\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors';\n    \nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onChange = (value) => dispatch(changeFilter(value));\n\n  const handleFilterChange = (e) => {\n    const { value } = e.target;\n    onChange(value);\n  };\n\n  return (\n    <Box\n      sx={{\n        marginTop: 5,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}>\n      <h2 className={styles.span}>Find contacts by name</h2>\n      <Box\n        component=\"form\"\n        autoComplete=\"off\"\n        oValidate sx={{ mt: 1, width: 580 }}\n      >\n        <TextField\n          margin=\"normal\"\n          fullWidth\n          id=\"filter\"\n          label=\"Search\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={filter}\n          onInput={handleFilterChange}\n        />\n      </Box>\n    </Box>\n  );\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../redux/phonebook/phonebook-selectors';\nimport { fetchContacts } from '../redux/phonebook/phonebook-operations';\nimport Phonebook from '../components/Phonebook/Phonebook';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport styles from './StylesForPages.module.css';\n\nexport default function ContactPage() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n    return\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1 className={styles.contactTitle}>Contacts</h1>\n      <Phonebook />\n      <Filter />\n      \n      {contacts.length > 0 ? (\n        <ContactList contacts={contacts} />\n      ) : (\n        <p>Phonebook is empty</p>\n      )}\n    </>\n  );\n}","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"StylesForPages_title__UREVn\",\"contactTitle\":\"StylesForPages_contactTitle__VVH9k\",\"error\":\"StylesForPages_error__Y+Zgw\"};"],"names":["getFilter","state","contacts","filter","getVisibleContacts","phonebook","getContacts","normalizedFilter","toLowerCase","name","includes","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Phonebook","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","Box","sx","marginTop","display","flexDirection","alignItems","component","onSubmit","e","preventDefault","contact","find","item","alert","addContact","addContactItem","autoComplete","oValidate","mt","TextField","margin","fullWidth","label","placeholder","type","pattern","value","title","required","onChange","target","Button","color","variant","mb","ContactItem","className","styles","onClick","deleteContact","float","Contacts","width","map","Filter","onInput","changeFilter","ContactPage","useEffect","fetchContacts","length"],"sourceRoot":""}